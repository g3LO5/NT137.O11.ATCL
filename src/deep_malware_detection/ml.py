import torch
from torch.nn.utils.rnn import pad_sequence
from torch.utils.data import DataLoader
from models import *  # Import the model class
from dataset import MalwareDataset  # Import the dataset class
from utils import *  # Import the plotting function
# Hàm collate tùy chỉnh để xử lý kích thước dữ liệu không đồng nhất
def custom_collate_fn(batch):
    data, labels = zip(*batch)
    # Cắt ngắn hoặc bổ sung padding cho mỗi chuỗi dữ liệu để đảm bảo không vượt quá max_len
    max_len = 4096  # Độ dài tối đa mà mô hình của bạn có thể xử lý
    data_padded = pad_sequence([d[:max_len] for d in data], batch_first=True, padding_value=0)
    labels = torch.tensor(labels)
    return data_padded, labels
# Đường dẫn tới thư mục chứa dữ liệu kiểm tra
benign_test_dir = '/home/kali/Desktop/deep-malware-detection/raw/benign'
malware_test_dir = '/home/kali/Desktop/deep-malware-detection/raw/malicious'
# Đường dẫn tới file trọng số mô hình
model_path = '/home/kali/Desktop/deep-malware-detection/assets/checkpoints/RCNN.pt'
# Khởi tạo mô hình và tải trọng số
model = RCNN(
    embed_dim=8,
    out_channels=128,
    window_size=32,
    module=torch.nn.GRU,  # Sử dụng GRU
    hidden_size=256,      # Kích thước ẩn được cập nhật
    num_layers=1,         # Số lớp RNN được cập nhật
    bidirectional=True,  # Giả sử mô hình sử dụng bidirectional
    residual=False,       # Giả sử không sử dụng residual
    dropout=0.5
)
model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))
model.eval()
# Khởi tạo dataset và dataloader
test_dataset = MalwareDataset(benign_test_dir, malware_test_dir)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False, collate_fn=custom_collate_fn)
# Thiết lập thiết bị
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)
# Gọi hàm plot_confusion_matrix để tạo và lưu ma trận nhầm lẫn
plot_confusion_matrix(model, test_loader, 'RCNN', device)
plot_roc_curve(model, test_loader,'RCNN',device)
